Program = Terms
Terms = Term newline Terms | Term
Term = Term '=' Term | 'chord' Term Term | 'input' Term Term | 'repeat' Term Term | Term Term | Term Op Term | String 
		| '"\' Term '->' Term '"' | '"' Items '"' | Constant
Items = Constant Items | Delimiter Items | Constant

Op = '+' | '-' | '*' | '%' | '=='

#in the future maybe composition.
#optional strict flag for context. If set, type error is given if tracks made from non-unifyable contexts (ex different tempos) both are outputtet.

t = {l_i : t_i}^{i=1..n} | t -> t | RelInput | AbsInput | TimedAbsInput | TimedRelInput | TransInput | Track

#Contexts#
con1 = {quantization=16;
		tempo=120;
		key=c#;
		octave_pos=4} : ContextQTKO

con2 = {quantization=8} : ContextQ

#Chords
chord :: RelInput -> ContextKO -> Chord
chord :: AbsInput -> ContextO -> Chord

chrd1 = chord "1,3,5,6" con1 : Chord
chrd2 = chord "1,3,5,6" con1 : Chord
chrd3 = chord "C#,E-,G#" {octave_pos=4}  : Chord

#Input
input :: TimedAbsInput -> ContextQT -> Track 
input :: TimedRelInput -> ContextQTKO -> Track 
#Mix of abs and rel input not allowed

a = input "Cm7....R...Cm7(1)...R..." con1 : Track
b = input "1---2---3---4---" con1
c = input 1---2---3---4--- con1
d = input "chrd1...chrd2...R--..R..." con1 : 


#Transformations

transform :: Map -> Track -> Track
transform :: MapN -> Track -> Track
transform :: MapT ->  Track -> Track


modulate = "\n -> n+1"
add3rds = "\n -> n,3"
3rdsTo4ths= "\3 -> 4" 
swing = "\t%2==0 -> t+1" : Transformation
composedtrans = modulate . add3rds

#Applied Transformations

newTrack = modulate a

newTrack

a = newTrack

repeat a 4

#lines containing just a track are converteted to midi#

#Decision choice, should context used to create initial track, be saved so that further use of track with modulations need not add the context as an argument again?#
#Pros: less verbose, Cons: More error-prone and more complex typing for Tracks. Tracks become a product type of track and context type. Also context becomes coupled with track. how about context change? Should be decoupled. Solution over loading. Not a problem, a transformation should work on different contexts, given the track.#

#program = Stmts 
#Stmts = Stmt newline Stmts | Stmt
#Stmt = Comment | Assignment | Output
#Assignment = Var '=' Assignable
#Output = Var | Command
#Assignable = Command | String | Struct
#Constructs ikk= 'chord' String Struct | 'input' String Struct | Transformation 
#in the future maybe composition.

